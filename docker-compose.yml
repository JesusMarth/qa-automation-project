version: '3.8'

services:
  # Base de datos SQLite (usando un volumen para persistencia)
  database:
    image: alpine:latest
    volumes:
      - ./server:/app
      - sqlite_data:/app/data
    working_dir: /app
    command: sh -c "apk add --no-cache sqlite && sqlite3 /app/data/database.sqlite 'CREATE TABLE IF NOT EXISTS tasks (id INTEGER PRIMARY KEY AUTOINCREMENT, title TEXT NOT NULL, description TEXT, status TEXT DEFAULT \"pending\", priority TEXT DEFAULT \"medium\", created_at DATETIME DEFAULT CURRENT_TIMESTAMP, updated_at DATETIME DEFAULT CURRENT_TIMESTAMP); CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT UNIQUE NOT NULL, password TEXT NOT NULL, email TEXT UNIQUE NOT NULL, created_at DATETIME DEFAULT CURRENT_TIMESTAMP);' && tail -f /dev/null"
    networks:
      - app-network

  # Servidor backend
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    volumes:
      - ./server:/app
      - /app/node_modules
      - sqlite_data:/app/data
    environment:
      - NODE_ENV=development
      - PORT=3001
    depends_on:
      - database
    networks:
      - app-network
    command: npm run dev

  # Cliente frontend
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    depends_on:
      - server
    networks:
      - app-network
    command: npm run dev

  # Servicio de pruebas (opcional)
  tests:
    build:
      context: .
      dockerfile: Dockerfile.test
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=test
    depends_on:
      - server
      - client
    networks:
      - app-network
    command: npm run test
    profiles:
      - testing

volumes:
  sqlite_data:

networks:
  app-network:
    driver: bridge 