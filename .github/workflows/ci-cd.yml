name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Pruebas unitarias
  unit-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install root dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Install client dependencies
      run: |
        cd client
        npm ci
    
    - name: Install server dependencies
      run: |
        cd server
        npm ci
    
    - name: Run unit tests
      run: |
        cd client
        npm run test:coverage
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: ./client/coverage/

  # Pruebas de API
  api-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install root dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Install server dependencies
      run: |
        cd server
        npm ci
    
    - name: Start server
      run: |
        cd server
        npm start &
        sleep 15
    
    - name: Run API tests with local Newman
      run: |
        npx newman run tests/api/task-manager-api.postman_collection.json -r cli,html --timeout 30000
    
    - name: Upload API test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: api-test-results
        path: newman/

  # Pruebas E2E con Playwright
  e2e-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install root dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Install client dependencies
      run: |
        cd client
        npm ci
    
    - name: Install server dependencies
      run: |
        cd server
        npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium
    
    - name: Start application
      run: |
        cd server && npm start &
        cd ../client && npm run dev &
        sleep 20
    
    - name: Run Playwright tests
      run: npx playwright test --config=playwright.config.js --project=chromium
    
    - name: Upload Playwright results
      uses: actions/upload-artifact@v4
      with:
        name: playwright-results
        path: playwright-report/
    
    - name: Upload Playwright screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-screenshots
        path: test-results/

  # Generación de video demo
  generate-demo-video:
    runs-on: ubuntu-latest
    needs: [unit-tests, api-tests, e2e-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install root dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Install client dependencies
      run: |
        cd client
        npm ci
    
    - name: Install server dependencies
      run: |
        cd server
        npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium
    
    - name: Start application
      run: |
        cd server && npm start &
        cd ../client && npm run dev &
        sleep 20
    
    - name: Generate demo video
      run: |
        npx playwright test tests/e2e/demo-video.spec.js --config=playwright.config.js --project=chromium
    
    - name: Upload demo video
      uses: actions/upload-artifact@v4
      with:
        name: demo-video
        path: test-results/demo-video/

  # Construcción y despliegue
  build-and-deploy:
    needs: [unit-tests, api-tests, e2e-tests, generate-demo-video]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install root dependencies
      run: npm ci --legacy-peer-deps
    
    - name: Install client dependencies
      run: |
        cd client
        npm ci
    
    - name: Install server dependencies
      run: |
        cd server
        npm ci
    
    - name: Build client
      run: cd client && npm run build
    
    - name: Build Docker images
      run: |
        docker build -t task-manager-server ./server
        docker build -t task-manager-client ./client
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          client/dist/
          server/
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Aquí irían los comandos de despliegue reales
        # Por ejemplo: kubectl apply, docker push, etc. 